#!/usr/bin/env python

# stdlib imports
import argparse
import os
import shutil

# local imports
from product.constants import BASE_PDL_FOLDER, CFG, JAR, JAVA, PRIVATEKEY
from product.pdl import store_fault
from product.web_product import WebProduct


def get_parser():
    description = '''Send a finite fault product for event pages.'''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('net', help='Network code (example: us).')
    parser.add_argument('eventid', help='Event identification code.')
    parser.add_argument('ffm1', help='Directory where all files are '
            'contained for the finite fault model.')
    parser.add_argument('-ffm2', dest="ffm2", type=str, default='',
            help='Directory where all files are contained for the second '
            'finite fault model.')
    parser.add_argument("-v", "--version", dest="version",
                      help="Add a version number to the finite fault output",
                      metavar="COMMENT")
    parser.add_argument("-r", "--review",action="store_true",
                      dest="doReview", default=False,
                      help="don't send products to PDL")
    return parser

def main(args):
    two_faults = False
    comment = 'Not available yet.'

    if args.version is None:
        version = 1
    else:
        version = int(args.version)
        if version < 1:
            raise Exception(
                    'Version number less than one %r.' % args.version)
    if args.ffm2 != '':
        multiple = True
    else:
        multiple = False

    ffm1dir = args.ffm1
    product1 = WebProduct.fromDirectory(ffm1dir, args.eventid,
            version=args.version)

    folders = ''
    if multiple:
        pdlfolder1 = os.path.join(BASE_PDL_FOLDER, args.eventid + '_1')
        pdlfolder2 = os.path.join(BASE_PDL_FOLDER, args.eventid + '_2')
        ffm2dir = args.ffm2
        product2 = WebProduct.fromDirectory(ffm2dir, args.eventid,
                version=args.version)
        os.makedirs(pdlfolder2, exist_ok=True)
        copy_files(product2.paths, pdlfolder2)
        folders += pdlfolder2 + ' and '
    else:
        pdlfolder1 = os.path.join(BASE_PDL_FOLDER, args.eventid)
    os.makedirs(pdlfolder1, exist_ok=True)
    copy_files(product1.paths, pdlfolder1)
    folders += pdlfolder1

    if not args.doReview:
        if multiple:
            send_product(args.eventid, args.net, product1, pdlfolder1, 1)
            send_product(args.eventid, args.net, product2, pdlfolder2, 2)
        else:
            send_product(args.eventid, args.net, product1, pdlfolder1)
    else:
        print('Output was written to %s' % folders)

def copy_files(file_directory, pdl_directory):
    for key in file_directory:
        current = file_directory[key][0]
        future = os.path.join(pdl_directory, file_directory[key][1])
        shutil.copy2(current, future)

def send_product(eventid, network, product, pdlfolder, number=None):
    """
    Configure pdl and send product directory.
    """
    if not os.path.exists(JAVA):
        raise FileNotFoundError("File does not exist %r." % JAVA)
    if not os.path.exists(JAR):
        raise FileNotFoundError("File does not exist %r." % JAR)
    if not os.path.exists(CFG):
        raise FileNotFoundError("File does not exist %r." % CFG)
    if not os.path.exists(PRIVATEKEY):
        raise FileNotFoundError("File does not exist %r." % PRIVATEKEY)
    files, msg = store_fault(CFG, network, eventid, JAR, JAVA,
            pdlfolder, PRIVATEKEY, 'us', product.properties,
            number=number)
    print(files, msg)

if __name__ == '__main__':
    parser = get_parser()
    pargs, unknown = parser.parse_known_args()
    print(pargs)
    main(pargs)
